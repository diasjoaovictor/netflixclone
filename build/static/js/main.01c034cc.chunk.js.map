{"version":3,"sources":["components/Movierow/MovieRow.js","Tmdb.js","App.js","index.js"],"names":["title","items","className","results","length","map","item","key","src","poster_path","original_title","API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","getMovieInfo","movieId","type","info","useState","movieList","setMovieList","setfeaturedData","useEffect","Tmdb","list","topRated","filter","i","randomChosen","Math","floor","random","chosen","id","chosenInfo","loadAll","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAIe,cAAoB,IAAlBA,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,MAEtB,OACE,sBAAKC,UAAU,WAAf,UACC,6BAAKF,IACL,qBAAKE,UAAU,oBAAf,SACE,qBAAKA,UAAU,gBAAf,SACED,EAAME,QAAQC,OAAS,GAAKH,EAAME,QAAQE,KAAI,SAACC,EAAKC,GAAN,OAC7C,qBAAeL,UAAU,gBAAzB,SACE,qBAAMM,IAAG,yCAAoCF,EAAKG,aAAeH,KAAMA,EAAKI,kBADpEH,cCZdI,EAAU,mCAGVC,EAAU,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACGC,MAAM,GAAD,OAHV,gCAGU,OAAeF,IADvB,cACTG,EADS,gBAEIA,EAAIC,OAFR,cAETA,EAFS,yBAGRA,GAHQ,2CAAH,sDAMD,GACXC,YAAY,WAAD,4BAAE,sBAAAJ,EAAA,sEAKYF,EAAW,wDAAD,OAAyDD,IAL/E,gCAGDQ,KAAM,WACNnB,MAAO,UACPC,MALC,eAUYW,EAAW,yDAAD,OAA0DD,IAVhF,gCAQDQ,KAAM,SACNnB,MAAO,aACPC,MAVC,gBAeYW,EAAW,yDAAD,OAA0DD,IAfhF,iCAaDQ,KAAM,SACNnB,MAAO,aACPC,MAfC,gBAoBYW,EAAW,4DAAD,OAA6DD,IApBnF,iCAkBDQ,KAAM,UACNnB,MAAO,UACPC,MApBC,2FAAF,kDAAC,GAwBZmB,aAAa,WAAD,4BAAE,WAAOC,EAAQC,GAAf,eAAAR,EAAA,6DACNS,EAAO,GAERF,IACCE,EAAOX,EAAW,IAAD,OAAKU,EAAL,YAAaD,EAAb,mCAA+CV,KAJ1D,kBAOHY,GAPG,2CAAF,qDAAC,IC5BF,G,YAAA,WAEb,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,MAAjD,mBAAqBG,GAArB,WAkBA,OAhBAC,qBAAU,YACK,uCAAG,oCAAAd,EAAA,sEAEGe,EAAKX,cAFR,cAEVY,EAFU,OAGdJ,EAAaI,GAGTC,EAAWD,EAAKE,QAAO,SAAAC,GAAC,MAAa,aAAXA,EAAEd,QAC5Be,EAAeC,KAAKC,MAAMD,KAAKE,UAAYN,EAAS,GAAG9B,MAAME,QAAQC,OAAQ,IAC7EkC,EAASP,EAAS,GAAG9B,MAAME,QAAQ+B,GARzB,SASSL,EAAKT,aAAakB,EAAOC,GAAG,MATrC,OASVC,EATU,OAUdb,EAAgBa,GAVF,4CAAH,qDAabC,KACC,IAED,qBAAKvC,UAAU,OAAf,SAOE,yBAASA,UAAU,QAAnB,SACGuB,EAAUpB,KAAI,SAACC,EAAKC,GAAN,OACf,cAAC,EAAD,CAAoBP,MAAOM,EAAKN,MAAOC,MAAOK,EAAKL,OAApCM,YCjCvBmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.01c034cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MovieRow.css';\r\n\r\n// eslint-disable-next-line\r\nexport default ({title, items}) =>{\r\n  \r\n  return(  \r\n    <div className=\"movieRow\">\r\n     <h2>{title}</h2>\r\n     <div className=\"movieRow-listarea\">\r\n       <div className=\"movieRow-list\">\r\n        {items.results.length > 0 && items.results.map((item,key)=>(\r\n          <div key={key} className=\"movieRow-item\"> \r\n            <img  src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} item={item.original_title}/>\r\n          </div>\r\n        ))}\r\n       </div>\r\n     </div>\r\n    </div>\r\n  );\r\n}","const API_KEY = 'b2e9a64eb9006c9efa13a90dbaa2193e';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}${endpoint}`)\r\n    const json = await req.json()\r\n    return json\r\n}\r\n\r\nexport default {\r\n    getHomeList: async()  =>{\r\n        return[\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em alta',\r\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ];\r\n    },\r\n    getMovieInfo: async (movieId,type) => {\r\n        let info = {};\r\n\r\n        if(movieId){\r\n            info = basicFetch(`/${type}/${movieId}?language=pt-BR&api_key=${API_KEY}`)\r\n        }\r\n\r\n        return info;\r\n    }\r\n    \r\n}\r\n","import React, { useEffect, useState} from 'react';\nimport MovieRow from './components/Movierow/MovieRow';\nimport Tmdb from './Tmdb';\nimport  './App.css';\nimport FeaturedMovie from './components/FeaturedMovie/FeaturedMovie';\n\nexport default () => {\n  \n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setfeaturedData] = useState(null);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      //Pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      //Pegando filmes em destaque\n      let topRated = list.filter(i=>i.slug === 'toprated');\n      let randomChosen = Math.floor(Math.random() * (topRated[0].items.results.length -1));\n      let chosen = topRated[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id,'tv');\n      setfeaturedData(chosenInfo);\n    }\n\n    loadAll();\n  }, [])\n  return (\n    <div className=\"page\">\n      \n      {/* {featuredData &&\n        <FeaturedMovie item={featuredData}/>\n      } */}\n      \n\n      <section className=\"lists\">\n        {movieList.map((item,key) => (\n        <MovieRow key={key} title={item.title} items={item.items}/>\n        ))\n        }\n      </section>\n    </div>\n  )\n\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}